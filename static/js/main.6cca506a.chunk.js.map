{"version":3,"sources":["Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Pagination","goToPrevPokemon","goToNextPokemon","className","onClick","App","pokemonNames","useState","pokemon","setPokemon","pokemonData","setPokemonData","pokemonType","setPokemonType","currentId","setCurrentId","getPokemon","a","toArray","pokemonTypes","url","fetch","res","json","data","push","types","forEach","type","name","id","alert","console","log","getRandomPokemon","min","max","Math","ceil","floor","random","fetchPro","i","results","length","url2","res2","data2","getNextPokemon","getPrevPokemon","onSubmit","e","preventDefault","onChange","target","value","toLowerCase","placeholder","class","map","src","sprites","other","alt","toUpperCase","slice","round","height","weight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cca506a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Pagination = ({ goToPrevPokemon, goToNextPokemon }) => {\r\n  return (\r\n    <div>\r\n      {goToPrevPokemon && (\r\n        <button className=\"pa1 mb3\" onClick={goToPrevPokemon}>\r\n          Previous\r\n        </button>\r\n      )}\r\n      {goToNextPokemon && (\r\n        <button className=\"pa1 mb3\" onClick={goToNextPokemon}>\r\n          Next\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState } from 'react';\r\nimport Pagination from './Pagination';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const pokemonNames = {};\r\n  const [pokemon, setPokemon] = useState('');\r\n  const [pokemonData, setPokemonData] = useState([]);\r\n  const [pokemonType, setPokemonType] = useState([]);\r\n  const [currentId, setCurrentId] = useState();\r\n\r\n  const getPokemon = async function () {\r\n    const toArray = [];\r\n    const pokemonTypes = [];\r\n    try {\r\n      const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      toArray.push(data);\r\n      data.types.forEach(type => pokemonTypes.push(type.type.name));\r\n      setPokemonType(pokemonTypes);\r\n      setPokemonData(toArray);\r\n      setCurrentId(toArray[0].id);\r\n    } catch (err) {\r\n      alert(\r\n        \"We couldn't find that PokÃ©mon. Make sure you don't have any typos and try again!\"\r\n      );\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const randomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const getRandomPokemon = async function () {\r\n    // get a random number between 1 and 898 (all pokemon)\r\n    const random = randomInt(1, 898);\r\n    const pokemonTypes = [];\r\n    const toArray = [];\r\n    try {\r\n      // fetch a list of all pokemon\r\n      const url = 'https://pokeapi.co/api/v2/pokemon?limit=1000';\r\n      const fetchPro = fetch(url);\r\n      const res = await fetchPro;\r\n      const data = await res.json();\r\n\r\n      // push all pokemon to pokemonNames with an id\r\n      for (let i = 0; i < data.results.length; i++) {\r\n        pokemonNames[i] = data.results[i].name;\r\n      }\r\n\r\n      // fetch a random pokemon from pokemonNames\r\n      const url2 = `https://pokeapi.co/api/v2/pokemon/${\r\n        pokemonNames[random - 1]\r\n      }`;\r\n      const res2 = await fetch(url2);\r\n      const data2 = await res2.json();\r\n\r\n      toArray.push(data2);\r\n      data2.types.forEach(type => pokemonTypes.push(type.type.name));\r\n      setPokemonType(pokemonTypes);\r\n      setPokemonData(toArray);\r\n      setCurrentId(toArray[0].id);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getNextPokemon = async function () {\r\n    const pokemonTypes = [];\r\n    const toArray = [];\r\n    try {\r\n      // fetch a list of all pokemon\r\n      const url = 'https://pokeapi.co/api/v2/pokemon?limit=1000';\r\n      const fetchPro = fetch(url);\r\n      const res = await fetchPro;\r\n      const data = await res.json();\r\n\r\n      // push all pokemon to pokemonNames with an id\r\n      for (let i = 0; i < data.results.length; i++) {\r\n        pokemonNames[i] = data.results[i].name;\r\n      }\r\n\r\n      // fetch the next pokemon from pokemonNames based on current id\r\n      const url2 = `https://pokeapi.co/api/v2/pokemon/${pokemonNames[currentId]}`;\r\n      const res2 = await fetch(url2);\r\n      const data2 = await res2.json();\r\n\r\n      toArray.push(data2);\r\n      data2.types.forEach(type => pokemonTypes.push(type.type.name));\r\n      setPokemonType(pokemonTypes);\r\n      setPokemonData(toArray);\r\n      setCurrentId(toArray[0].id);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getPrevPokemon = async function () {\r\n    const pokemonTypes = [];\r\n    const toArray = [];\r\n    try {\r\n      // fetch a list of all pokemon\r\n      const url = 'https://pokeapi.co/api/v2/pokemon?limit=1000';\r\n      const fetchPro = fetch(url);\r\n      const res = await fetchPro;\r\n      const data = await res.json();\r\n\r\n      // push all pokemon to pokemonNames with an id\r\n      for (let i = 0; i < data.results.length; i++) {\r\n        pokemonNames[i] = data.results[i].name;\r\n      }\r\n\r\n      // fetch the previous pokemon from pokemonNames based on current id\r\n      const url2 = `https://pokeapi.co/api/v2/pokemon/${\r\n        pokemonNames[currentId - 2]\r\n      }`;\r\n      const res2 = await fetch(url2);\r\n      const data2 = await res2.json();\r\n\r\n      toArray.push(data2);\r\n      data2.types.forEach(type => pokemonTypes.push(type.type.name));\r\n      setPokemonType(pokemonTypes);\r\n      setPokemonData(toArray);\r\n      setCurrentId(toArray[0].id);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setPokemon(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    getPokemon();\r\n  };\r\n\r\n  const handleClick = () => {\r\n    getRandomPokemon();\r\n  };\r\n\r\n  const goToNextPokemon = () => {\r\n    getNextPokemon();\r\n  };\r\n\r\n  const goToPrevPokemon = () => {\r\n    getPrevPokemon();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f2 white\">PokÃ©dex</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            placeholder=\"Enter pokemon name\"\r\n          />\r\n        </label>\r\n      </form>\r\n      <p className=\"white\">OR</p>\r\n      <button class=\"random\" onClick={handleClick}>\r\n        ð Surprise Me!\r\n      </button>\r\n      <Pagination\r\n        goToNextPokemon={currentId < 898 ? goToNextPokemon : null}\r\n        goToPrevPokemon={currentId > 1 ? goToPrevPokemon : null}\r\n      />\r\n      {pokemonData.map(data => {\r\n        return (\r\n          <div className=\"container\">\r\n            <img\r\n              src={data.sprites.other['official-artwork']['front_default']}\r\n              alt=\"pokÃ©mon\"\r\n            />\r\n            <div className=\"divTable\">\r\n              <div className=\"divTableBody\">\r\n                <div className=\"divTableRow\">\r\n                  <div className=\"divTableCell\">Name</div>\r\n                  <div className=\"divTableCell\">\r\n                    {`${data.name[0].toUpperCase()}${data.name.slice(1)}`}\r\n                  </div>\r\n                </div>\r\n                <div className=\"divTableRow\">\r\n                  <div className=\"divTableCell\">Number</div>\r\n                  <div className=\"divTableCell\">{data.id}</div>\r\n                </div>\r\n                <div className=\"divTableRow\">\r\n                  <div className=\"divTableCell\">Type</div>\r\n                  <div className=\"divTableCell\">\r\n                    {pokemonType.length > 1\r\n                      ? `${pokemonType[0][0].toUpperCase()}${pokemonType[0].slice(\r\n                          1\r\n                        )}, ${pokemonType[1][0].toUpperCase()}${pokemonType[1].slice(\r\n                          1\r\n                        )}`\r\n                      : `${pokemonType[0][0].toUpperCase()}${pokemonType[0].slice(\r\n                          1\r\n                        )}`}\r\n                  </div>\r\n                </div>\r\n                <div className=\"divTableRow\">\r\n                  <div className=\"divTableCell\">Height</div>\r\n                  <div className=\"divTableCell\">\r\n                    {' '}\r\n                    {Math.round(data.height * 3.9)}\"\r\n                  </div>\r\n                </div>\r\n                <div className=\"divTableRow\">\r\n                  <div className=\"divTableCell\">Weight</div>\r\n                  <div className=\"divTableCell\">\r\n                    {' '}\r\n                    {Math.round(data.weight / 4.3)} lbs\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}